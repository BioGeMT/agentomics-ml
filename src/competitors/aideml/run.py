import asyncio
import os
import dotenv
import sys
import argparse
import subprocess
from pathlib import Path

sys.path.append("/repository/src")  
from run_logging.wandb import setup_logging
from run_logging.log_files import log_files

import wandb

ENV_NAME = "aideml-env"  # Environment name defined in run2.sh


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--dataset", required=True, help="Dataset name")
    parser.add_argument(
        "--model",
        required=True,
        help="Model name for agent.code.model (e.g., openai/gpt-4.1-2025-04-14)",
    )
    parser.add_argument("--run_id", required=True, help="Run ID for the agent (AGENT_ID from run2.sh)")
    parser.add_argument("--tags", required=True, nargs="+", help="Wandb tags")
    parser.add_argument("--eval", default=None, help="Value for eval_strategy") #this is passed from .sh
    return parser.parse_args()


async def main():
    initial_cwd_run2py = os.getcwd()
    print(f"DEBUG: run2.py initial CWD (from os.getcwd()): {initial_cwd_run2py}")

    dotenv.load_dotenv("/repository/.env")
    args = parse_args()
    run_id = args.run_id

    target_cwd_for_aide_subshell = Path(f"/workspace/runs/{run_id}/AIDE")
    print(f"DEBUG: run2.py target_cwd_for_aide_subshell: {str(target_cwd_for_aide_subshell)}")

    config = {
        "dataset": args.dataset,
        "agent_code_model": args.model,
        "run_id": run_id,
        "tags": args.tags,
        "agent_id": run_id,
        "aide_eval_strategy_arg_value_intended": args.eval,  
    }
    wandb_key = os.getenv("WANDB_API_KEY")

    wandb_run_dir = Path(f"/workspace/runs/{run_id}/run2py_wandb")
    wandb_run_dir.mkdir(parents=True, exist_ok=True)
    setup_logging(config, api_key=wandb_key, dir=str(wandb_run_dir))

    print(f"--- Starting AIDE Agent Execution for run_id: {run_id} ---")
    print(f"Target working directory for AIDE subshell: {str(target_cwd_for_aide_subshell)}")

    aide_internal_logs_path = target_cwd_for_aide_subshell / "aide_internal_logs"
    print(f"DEBUG: run2.py aide_internal_logs_path for log_dir override: {str(aide_internal_logs_path)}")

    desc_file_name = "aide_prompt.txt"
    data_dir_name = "input"

    aide_cmd_list = [
        "aide",
        f"data_dir='{data_dir_name}'",
        f"desc_file='{desc_file_name}'",
        f"log_dir='{str(aide_internal_logs_path)}'",
        f"agent.code.model='{args.model}'"
    ]

    if args.eval:
        aide_cmd_list.insert(-1, f"eval='{args.eval}'")

    aide_cmd_str = " ".join(aide_cmd_list)

    full_aide_shell_cmd = (
        f"cd {str(target_cwd_for_aide_subshell)} && "
        "source /opt/conda/etc/profile.d/conda.sh && "
        f"conda activate {ENV_NAME} && "
        f"{aide_cmd_str}"
    )

    print(f"Executing AIDE command (contents of aide_cmd_str): {aide_cmd_str}")
    print(f"DEBUG: run2.py full_aide_shell_cmd: {full_aide_shell_cmd}")
    print("Running AIDE...")

    process_aide = subprocess.run(
        full_aide_shell_cmd, shell=True, text=True, capture_output=True, executable="/usr/bin/bash"
    )

    print("AIDE STDOUT:\n", process_aide.stdout)
    print("AIDE STDERR:\n", process_aide.stderr)
    print(f"AIDE Exit status: {process_aide.returncode}")

    wandb.log(
        {
            "aide_stdout": process_aide.stdout,
            "aide_stderr": process_aide.stderr,
            "aide_exit_code": process_aide.returncode,
        }
    )

    if process_aide.returncode != 0:
        print(f"AIDE command failed with exit code {process_aide.returncode}. Halting run.")
        wandb.summary["aide_execution_status"] = "failed"
        wandb.finish(exit_code=1)
        sys.exit(1)
    else:
        print("AIDE command executed successfully.")
        wandb.summary["aide_execution_status"] = "success"

        try:
            print(f"\n--- Logging files generated by AIDE in {target_cwd_for_aide_subshell} ---")
            log_files(str(target_cwd_for_aide_subshell), सफेद_base_path_to_strip=f"/workspace/runs/{run_id}/")
        except Exception as e:
            print(f"Warning: Error logging AIDE generated files: {e}")

    wandb.finish()
    print(f"--- Completed AIDE execution for run_id: {run_id} ---")


if __name__ == "__main__":
    asyncio.run(main())
